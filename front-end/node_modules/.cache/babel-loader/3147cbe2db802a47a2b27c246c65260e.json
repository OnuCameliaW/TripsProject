{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/ImageCanvas\n */\n\n\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=): void): void} Loader\n */\n\nvar ImageCanvas =\n/** @class */\nfunction (_super) {\n  __extends(ImageCanvas, _super);\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {HTMLCanvasElement} canvas Canvas.\n   * @param {Loader=} opt_loader Optional loader function to\n   *     support asynchronous canvas drawing.\n   */\n\n\n  function ImageCanvas(extent, resolution, pixelRatio, canvas, opt_loader) {\n    var _this = this;\n\n    var state = opt_loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n    _this = _super.call(this, extent, resolution, pixelRatio, state) || this;\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n\n    _this.loader_ = opt_loader !== undefined ? opt_loader : null;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    _this.canvas_ = canvas;\n    /**\n     * @private\n     * @type {?Error}\n     */\n\n    _this.error_ = null;\n    return _this;\n  }\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {?Error} Any error that occurred during rendering.\n   */\n\n\n  ImageCanvas.prototype.getError = function () {\n    return this.error_;\n  };\n  /**\n   * Handle async drawing complete.\n   * @param {Error=} err Any error during drawing.\n   * @private\n   */\n\n\n  ImageCanvas.prototype.handleLoad_ = function (err) {\n    if (err) {\n      this.error_ = err;\n      this.state = ImageState.ERROR;\n    } else {\n      this.state = ImageState.LOADED;\n    }\n\n    this.changed();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ImageCanvas.prototype.load = function () {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  };\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   */\n\n\n  ImageCanvas.prototype.getImage = function () {\n    return this.canvas_;\n  };\n\n  return ImageCanvas;\n}(ImageBase);\n\nexport default ImageCanvas;","map":null,"metadata":{},"sourceType":"module"}