{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/canvas/VectorImageLayer\n */\n\n\nimport ImageCanvas from '../../ImageCanvas.js';\nimport ViewHint from '../../ViewHint.js';\nimport { getHeight, getWidth, isEmpty, scaleFromCenter } from '../../extent.js';\nimport { assign } from '../../obj.js';\nimport CanvasImageLayerRenderer from './ImageLayer.js';\nimport CanvasVectorLayerRenderer from './VectorLayer.js';\nimport EventType from '../../events/EventType.js';\nimport ImageState from '../../ImageState.js';\nimport { renderDeclutterItems } from '../../render.js';\nimport { apply, compose, create } from '../../transform.js';\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\n\nvar CanvasVectorImageLayerRenderer =\n/** @class */\nfunction (_super) {\n  __extends(CanvasVectorImageLayerRenderer, _super);\n  /**\n   * @param {import(\"../../layer/VectorImage.js\").default} layer Vector image layer.\n   */\n\n\n  function CanvasVectorImageLayerRenderer(layer) {\n    var _this = _super.call(this, layer) || this;\n    /**\n     * @private\n     * @type {import(\"./VectorLayer.js\").default}\n     */\n\n\n    _this.vectorRenderer_ = new CanvasVectorLayerRenderer(layer);\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.layerImageRatio_ = layer.getImageRatio();\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    _this.coordinateToVectorPixelTransform_ = create();\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    _this.renderedPixelToCoordinateTransform_ = null;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasVectorImageLayerRenderer.prototype.disposeInternal = function () {\n    this.vectorRenderer_.dispose();\n\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasVectorImageLayerRenderer.prototype.getFeatures = function (pixel) {\n    if (this.vectorRenderer_) {\n      var vectorPixel = apply(this.coordinateToVectorPixelTransform_, apply(this.renderedPixelToCoordinateTransform_, pixel.slice()));\n      return this.vectorRenderer_.getFeatures(vectorPixel);\n    } else {\n      var promise = new Promise(function (resolve, reject) {\n        resolve([]);\n      });\n      return promise;\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasVectorImageLayerRenderer.prototype.handleFontsChanged = function () {\n    this.vectorRenderer_.handleFontsChanged();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasVectorImageLayerRenderer.prototype.prepareFrame = function (frameState) {\n    var pixelRatio = frameState.pixelRatio;\n    var viewState = frameState.viewState;\n    var viewResolution = viewState.resolution;\n    var hints = frameState.viewHints;\n    var vectorRenderer = this.vectorRenderer_;\n    var renderedExtent = frameState.extent;\n\n    if (this.layerImageRatio_ !== 1) {\n      renderedExtent = renderedExtent.slice(0);\n      scaleFromCenter(renderedExtent, this.layerImageRatio_);\n    }\n\n    var width = getWidth(renderedExtent) / viewResolution;\n    var height = getHeight(renderedExtent) / viewResolution;\n\n    if (!hints[ViewHint.ANIMATING] && !hints[ViewHint.INTERACTING] && !isEmpty(renderedExtent)) {\n      vectorRenderer.useContainer(null, null, 1);\n      var context = vectorRenderer.context;\n      var imageFrameState_1 =\n      /** @type {import(\"../../PluggableMap.js\").FrameState} */\n      assign({}, frameState, {\n        declutterItems: [],\n        size: [width, height],\n        viewState:\n        /** @type {import(\"../../View.js\").State} */\n        assign({}, frameState.viewState, {\n          rotation: 0\n        })\n      });\n      var image_1 = new ImageCanvas(renderedExtent, viewResolution, pixelRatio, context.canvas, function (callback) {\n        if (vectorRenderer.prepareFrame(imageFrameState_1) && vectorRenderer.replayGroupChanged) {\n          vectorRenderer.renderFrame(imageFrameState_1, null);\n          renderDeclutterItems(imageFrameState_1, null);\n          callback();\n        }\n      });\n      image_1.addEventListener(EventType.CHANGE, function () {\n        if (image_1.getState() === ImageState.LOADED) {\n          this.image_ = image_1;\n        }\n      }.bind(this));\n      image_1.load();\n    }\n\n    if (this.image_) {\n      var image = this.image_;\n      var imageResolution = image.getResolution();\n      var imagePixelRatio = image.getPixelRatio();\n      var renderedResolution = imageResolution * pixelRatio / imagePixelRatio;\n      this.renderedResolution = renderedResolution;\n      this.renderedPixelToCoordinateTransform_ = frameState.pixelToCoordinateTransform.slice();\n      this.coordinateToVectorPixelTransform_ = compose(this.coordinateToVectorPixelTransform_, width / 2, height / 2, 1 / renderedResolution, -1 / renderedResolution, 0, -viewState.center[0], -viewState.center[1]);\n    }\n\n    return !!this.image_;\n  };\n  /**\n   * @override\n   */\n\n\n  CanvasVectorImageLayerRenderer.prototype.preRender = function () {};\n  /**\n   * @override\n   */\n\n\n  CanvasVectorImageLayerRenderer.prototype.postRender = function () {};\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasVectorImageLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, declutteredFeatures) {\n    if (this.vectorRenderer_) {\n      return this.vectorRenderer_.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, declutteredFeatures);\n    } else {\n      return _super.prototype.forEachFeatureAtCoordinate.call(this, coordinate, frameState, hitTolerance, callback, declutteredFeatures);\n    }\n  };\n\n  return CanvasVectorImageLayerRenderer;\n}(CanvasImageLayerRenderer);\n\nexport default CanvasVectorImageLayerRenderer;","map":null,"metadata":{},"sourceType":"module"}